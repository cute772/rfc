<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC0791 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0791.xml">
<!ENTITY RFC0792 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0792.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2460 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2460.xml">
<!ENTITY RFC4443 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4443.xml">
<!ENTITY RFC4820 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4820.xml">
<!ENTITY RFC4821 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4821.xml">
<!ENTITY RFC4895 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4895.xml">
<!ENTITY RFC4960 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4960.xml">
<!ENTITY RFC5061 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5061.xml">
<!ENTITY RFC3424 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3424.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC6458 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6458.xml">
<!ENTITY RFC6936 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6936.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<rfc submissionType="IETF" number="6951" category="std" consensus="yes">
	<!-- Generated by id2xml 1.4.4 on 2018-11-13T07:04:39Z -->
	<?rfc compact="yes"?>
	<?rfc text-list-symbols="o*+-"?>
	<?rfc subcompact="no"?>
	<?rfc sortrefs="yes"?>
	<?rfc symrefs="yes"?>
	<?rfc strict="yes"?>
	<?rfc toc="yes"?>
	<front>
	<title abbrev="UDP Encapsulation of SCTP Packets">UDP Encapsulation of Stream Control Transmission Protocol (SCTP) Packets for End-Host to End-Host Communication</title>
	<author fullname="Michael Tuexen" initials="M." surname="Tuexen">
	<organization abbrev="Muenster Univ. of Appl. Sciences">Muenster University of Applied Sciences</organization>
	<address><postal><street>Stegerwaldstrasse 39</street>
	<street>48565 Steinfurt</street>
	<street>DE</street>
	</postal>
	<email>tuexen@fh-muenster.de</email>
	</address>
	</author>

	<author fullname="Randall R. Stewart" initials="R." surname="Stewart">
	<organization>Adara Networks</organization>
	<address><postal><street>Chapin, SC  29036</street>
	<street>US</street>
	</postal>
	<email>randall@lakerest.net</email>
	</address>
	</author>

	<date month="May" year="2013"/>
	<abstract><t>
   This document describes a simple method of encapsulating Stream
   Control Transmission Protocol (SCTP) packets into UDP packets and its
   limitations.  This allows the usage of SCTP in networks with legacy
   NATs that do not support SCTP.  It can also be used to implement SCTP
   on hosts without directly accessing the IP layer, for example,
   implementing it as part of the application without requiring special
   privileges.</t>

	<t>
   Please note that this document only describes the functionality
   required within an SCTP stack to add on UDP encapsulation, providing
   only those mechanisms for two end-hosts to communicate with each
   other over UDP ports.  In particular, it does not provide mechanisms
   to determine whether UDP encapsulation is being used by the peer, nor
   the mechanisms for determining which remote UDP port number can be
   used.  These functions are out of scope for this document.</t>

	<t>
   This document covers only end-hosts and not tunneling (egress or
   ingress) endpoints.</t>

	</abstract>
	</front>

	<middle>
	<section title="Introduction" anchor="section-1"><t>
   This document describes a simple method of encapsulating SCTP packets
   into UDP packets.  SCTP, as defined in <xref target="RFC4960"/>, runs directly over
   IPv4 or IPv6.  There are two main reasons for encapsulating SCTP
   packets:</t>

	<t><list style="symbols"><t>To allow SCTP traffic to pass through legacy NATs, which do not
      provide native SCTP support as specified in <xref target="BEHAVE"/> and
      <xref target="NATSUPP"/>.</t>

	<t>To allow SCTP to be implemented on hosts that do not provide
      direct access to the IP layer.  In particular, applications can
      use their own SCTP implementation if the operating system does not
      provide one.</t>

	</list>
	</t>

	<t>
   SCTP provides the necessary congestion control and reliability
   service that UDP does not perform.</t>

	</section>

	<section title="Conventions" anchor="section-2"><t>
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in <xref target="RFC2119"/>.</t>

	</section>

	<section title="Use Cases" anchor="section-3"><t>
   This section discusses two important use cases for encapsulating SCTP
   into UDP.</t>

	<section title="Portable SCTP Implementations" anchor="section-3.1"><t>
   Some operating systems support SCTP natively.  For other operating
   systems, implementations are available but require special privileges
   to install and/or use them.  In some cases, a kernel implementation
   might not be available at all.  When providing an SCTP implementation
   as part of a user process, most operating systems require special
   privileges to access the IP layer directly.</t>

	<t>
   Using UDP encapsulation makes it possible to provide an SCTP
   implementation as part of a user process that does not require any
   special privileges.</t>

	<t>
   A crucial point for implementing SCTP in user space is that the
   source address of outgoing packets needs to be controlled.  This is
   not an issue if the SCTP stack can use all addresses configured at</t>

	<t>
   the IP layer as source addresses.  However, it is an issue when also
   using the address management required for NAT traversal, described in
   <xref target="section-5.7"/>.</t>

	</section>

	<section title="Legacy NAT Traversal" anchor="section-3.2"><t>
   Using UDP encapsulation allows SCTP communication when traversing
   legacy NATs (i.e, those NATs not supporting SCTP as described in
   <xref target="BEHAVE"/> and <xref target="NATSUPP"/>).  For single-homed associations, IP addresses
   MUST NOT be listed in the INIT and INIT-ACK chunks.  To use multiple
   addresses, the dynamic address reconfiguration extension described in
   <xref target="RFC5061"/> MUST be used only with wildcard addresses in the ASCONF
   chunks (Address Configuration Change Chunks) in combination with
   <xref target="RFC4895"/>.</t>

	<t>
   For multihomed SCTP associations, the address management as described
   in <xref target="section-5.7"/> MUST be performed.</t>

	<t>
   SCTP sends periodic HEARTBEAT chunks on all idle paths.  These can
   keep the NAT state alive.</t>

	</section>

	</section>

	<section title="Unilateral Self-Address Fixing (UNSAF) Considerations" anchor="section-4"><t>
   As <xref target="RFC3424"/> requires a limited scope, this document only covers SCTP
   endpoints dealing with legacy constraints as described in <xref target="section-3"/>.
   It doesn't cover generic tunneling endpoints.</t>

	<t>
   Obviously, the exit strategy is to use hosts supporting SCTP natively
   and middleboxes supporting SCTP as specified in <xref target="BEHAVE"/> and
   <xref target="NATSUPP"/>.</t>

	</section>

	<section title="SCTP over UDP" anchor="section-5"><section title="Architectural Considerations" anchor="section-5.1"><t>
   UDP-encapsulated SCTP is normally communicated between SCTP stacks
   using the IANA-assigned UDP port number 9899 (sctp-tunneling) on both
   ends.  There are circumstances where other ports may be used on
   either end: As stated earlier, implementations in the application
   space might be required to use ports other than the registered port.
   Since NAT boxes might change UDP port numbers, the receiver might
   observe other UDP port numbers than were used by the sender.
   Discovery of alternate ports is outside of the scope of this
   document, but this section describes considerations for SCTP stack
   design in light of their potential use.</t>

	<t>
   Each SCTP stack uses a single local UDP encapsulation port number as
   the destination port for all its incoming SCTP packets.  While the
   uniqueness of the local UDP encapsulation port number is not
   necessarily required for the protocol, this greatly simplifies
   implementation design, since different ports for each address would
   require a sender implementation to choose the appropriate port while
   doing source address selection.  Using a single local UDP
   encapsulation port number per host is not possible if the SCTP stack
   is implemented as part of each application, there are multiple
   applications, and some of the applications want to use the same IP
   address.</t>

	<t>
   An SCTP implementation supporting UDP encapsulation MUST maintain a
   remote UDP encapsulation port number per destination address for each
   SCTP association.  Again, because the remote stack may be using ports
   other than the well-known port, each port may be different from each
   stack.  However, because of remapping of ports by NATs, the remote
   ports associated with different remote IP addresses may not be
   identical, even if they are associated with the same stack.</t>

	<t>
   Implementation note: Because the well-known port might not be used,
   implementations need to allow other port numbers to be specified as a
   local or remote UDP encapsulation port number through APIs.</t>

	</section>

	<section title="Packet Format" anchor="section-5.2"><t>
   To encapsulate an SCTP packet, a UDP header as defined in <xref target="RFC0768"/>
   is inserted between the IP header as defined in <xref target="RFC0791"/> and the
   SCTP common header as defined in <xref target="RFC4960"/>.</t>

	<t>
   Figure 1 shows the packet format of an encapsulated SCTP packet when
   IPv4 is used.</t>

	<figure title="An SCTP/UDP/IPv4 Packet" anchor="ref-an-sctp-udp-ipv4-packet"><artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         IPv4 Header                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         UDP Header                            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      SCTP Common Header                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        SCTP Chunk #1                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                           ...                                 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        SCTP Chunk #n                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
	</figure>
	<t>
   The packet format for an encapsulated SCTP packet when using IPv6 as
   defined in <xref target="RFC2460"/> is shown in Figure 2.  Please note that the
   number m of IPv6 extension headers can be 0.</t>

	<figure title="An SCTP/UDP/IPv6 Packet" anchor="ref-an-sctp-udp-ipv6-packet"><artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      IPv6 Base Header                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    IPv6 Extension Header #1                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                           ...                                 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    IPv6 Extension Header #m                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         UDP Header                            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      SCTP Common Header                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        SCTP Chunk #1                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                           ...                                 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        SCTP Chunk #n                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
	</figure>
	</section>

	<section title="Encapsulation Procedure" anchor="section-5.3"><t>
   Within the UDP header, the source port MUST be the local UDP
   encapsulation port number of the SCTP stack, and the destination port
   MUST be the remote UDP encapsulation port number maintained for the
   association and the destination address to which the packet is sent
   (see <xref target="section-5.1"/>).</t>

	<t>
   Because the SCTP packet is the UDP payload, the length of the UDP
   packet MUST be the length of the SCTP packet plus the size of the UDP
   header.</t>

	<t>
   The SCTP checksum MUST be computed for IPv4 and IPv6, and the UDP
   checksum SHOULD be computed for IPv4 and IPv6.  (See <xref target="RFC0768"/>
   regarding IPv4; see <xref target="RFC2460"/> and <xref target="RFC6936"/> regarding IPv6.)
   Although UDP with a zero checksum over IPv6 is allowed under certain
   constraints <xref target="RFC6936"/>, this document does not specify mechanisms for
   this mode.  Deployed support may be limited; also, at the time of
   writing, the use of a zero UDP checksum would be counter to the goal
   of legacy NAT traversal.</t>

	</section>

	<section title="Decapsulation Procedure" anchor="section-5.4"><t>
   When an encapsulated packet is received, the UDP header is removed.
   Then, the generic lookup is performed, as done by an SCTP stack
   whenever a packet is received, to find the association for the
   received SCTP packet.  After finding the SCTP association (which
   includes checking the verification tag), the UDP source port MUST be
   stored as the encapsulation port for the destination address the SCTP
   packet is received from (see <xref target="section-5.1"/>).</t>

	<t>
   When a non-encapsulated SCTP packet is received by the SCTP stack,
   the encapsulation of outgoing packets belonging to the same
   association and the corresponding destination address MUST be
   disabled.</t>

	</section>

	<section title="ICMP Considerations" anchor="section-5.5"><t>
   When receiving ICMP or ICMPv6 response packets, there might not be
   enough bytes in the payload to identify the SCTP association that the
   SCTP packet triggering the ICMP or ICMPv6 packet belongs to.  If a
   received ICMP or ICMPv6 packet cannot be related to a specific SCTP
   association or the verification tag cannot be verified, it MUST be
   discarded silently.  In particular, this means that the SCTP stack
   MUST NOT rely on receiving ICMP or ICMPv6 messages.  Implementation
   constraints could prevent processing received ICMP or ICMPv6
   messages.</t>

	<t>
   If received ICMP or ICMPv6 messages are processed, the following
   mapping SHOULD apply:</t>

	<t><list style="numbers"><t>ICMP messages with type 'Destination Unreachable' and code 'Port
       Unreachable' SHOULD be treated as ICMP messages with type
       'Destination Unreachable' and code 'Protocol Unreachable'.  See
       <xref target="RFC0792"/> for more details.</t>

	<t>ICMPv6 messages with type 'Destination Unreachable' and code
       'Port Unreachable' SHOULD be treated as ICMPv6 messages with type
       'Parameter Problem' and code 'unrecognized Next Header type
       encountered'.  See <xref target="RFC4443"/> for more details.</t>

	</list>
	</t>

	</section>

	<section title="Path MTU Considerations" anchor="section-5.6"><t>
   If an SCTP endpoint starts to encapsulate the packets of a path, it
   MUST decrease the Path MTU of that path by the size of the UDP
   header.  If it stops encapsulating them, the Path MTU SHOULD be
   increased by the size of the UDP header.</t>

	<t>
   When performing Path MTU discovery as described in <xref target="RFC4820"/> and
   <xref target="RFC4821"/>, it MUST be taken into account that one cannot rely on the
   feedback provided by ICMP or ICMPv6 due to the limitation laid out in
   <xref target="section-5.5"/>.</t>

	<t>
   If the implementation does not allow control of the Don't Fragment
   (DF) bit contained in the IPv4 header, then Path MTU discovery can't
   be used.  In this case, an implementation-specific value should be
   used instead.</t>

	</section>

	<section title="Handling of Embedded IP Addresses" anchor="section-5.7"><t>
   When using UDP encapsulation for legacy NAT traversal, IP addresses
   that might require translation MUST NOT be put into any SCTP packet.</t>

	<t>
   This means that a multihomed SCTP association is set up initially as
   a single-homed one, and the protocol extension <xref target="RFC5061"/> in
   combination with <xref target="RFC4895"/> is used to add the other addresses.  Only
   wildcard addresses are put into the SCTP packet.</t>

	<t>
   When addresses are changed during the lifetime of an association, the
   protocol extension <xref target="RFC5061"/> MUST be used with wildcard addresses
   only.  If an SCTP endpoint receives an ABORT with the T-bit set, it
   MAY use this as an indication that the addresses seen by the peer
   might have changed.</t>

	</section>

	<section title="Explicit Congestion Notification (ECN) Considerations" anchor="section-5.8"><t>
   If the implementation supports the sending and receiving of the ECN
   bits for the IP protocols being used by an SCTP association, the ECN
   bits MUST NOT be changed during sending and receiving.</t>

	</section>

	</section>

	<section title="Socket API Considerations" anchor="section-6"><t>
   This section describes how the socket API defined in <xref target="RFC6458"/> needs
   to be extended to provide a way for the application to control the
   UDP encapsulation.</t>

	<t>
   Please note that this section is informational only.</t>

	<t>
   A socket API implementation based on <xref target="RFC6458"/> is extended by
   supporting one new read/write socket option.</t>

	<section title="Get or Set the Remote UDP Encapsulation Port Number (SCTP_REMOTE_UDP_ENCAPS_PORT)" anchor="section-6.1"><t>
   This socket option can be used to set and retrieve the UDP
   encapsulation port number.  This allows an endpoint to encapsulate
   initial packets.</t>

	<figure><artwork><![CDATA[
struct sctp_udpencaps {
  sctp_assoc_t sue_assoc_id;
  struct sockaddr_storage sue_address;
  uint16_t sue_port;
};
]]></artwork>
	</figure>
	<t><list style="hanging" hangIndent="3"><t hangText="sue_assoc_id:">
	This parameter is ignored for one-to-one style
	<vspace blankLines="0"/>
	sockets.  For one-to-many style sockets, the application may fill
      in an association identifier or SCTP_FUTURE_ASSOC for this query.
      It is an error to use SCTP_{CURRENT|ALL}_ASSOC in sue_assoc_id.
	</t>

	<t hangText="sue_address:">
	This specifies which address is of interest.  If a
	<vspace blankLines="0"/>
	wildcard address is provided, it applies only to future paths.
	</t>

	<t hangText="sue_port:">
	The UDP port number in network byte order; used as the
	<vspace blankLines="0"/>
	destination port number for UDP encapsulation.  Providing a value
      of 0 disables UDP encapsulation.
	</t>

	</list>
	</t>

	</section>

	</section>

	<section title="IANA Considerations" anchor="section-7"><t>
   This document refers to the already assigned UDP port 9899 (sctp-
   tunneling).  IANA has updated this assignment to refer to this
   document.  As per <xref target="RFC6335"/>, the Assignee is [IESG] and the Contact
   is [IETF_Chair].</t>

	<t>
   Please note that the TCP port 9899 (sctp-tunneling) assignment is not
   needed anymore, and IANA has removed this TCP port number assignment
   and marked TCP port 9899 as "Reserved".</t>

	</section>

	<section title="Security Considerations" anchor="section-8"><t>
   Encapsulating SCTP into UDP does not add any additional security
   considerations to the ones given in <xref target="RFC4960"/> and <xref target="RFC5061"/>.</t>

	<t>
   Firewalls inspecting SCTP packets must also be aware of the
   encapsulation and apply corresponding rules to the encapsulated
   packets.</t>

	<t>
   An attacker might send a malicious UDP packet towards an SCTP
   endpoint to change the encapsulation port for a single remote address
   of a particular SCTP association.  However, as specified in
   <xref target="section-5.4"/>, this requires the usage of one of the two negotiated
   verification tags.  This protects against blind attackers the same
   way as described in <xref target="RFC4960"/> for SCTP over IPv4 or IPv6.  Non-blind
   attackers can affect SCTP association using the UDP encapsulation
   described in this document in the same way as SCTP associations not
   using the UDP encapsulation of SCTP described here.</t>

	</section>

	<section title="Acknowledgments" anchor="section-9"><t>
   The authors wish to thank Stewart Bryant, Dave Crocker, Gorry
   Fairhurst, Tero Kivinen, Barry Leiba, Pete Resnick, Martin
   Stiemerling, Irene Ruengeler, and Dan Wing for their invaluable
   comments.</t>

	</section>

	</middle>

	<back>
	<references title="Normative References">
	&RFC0768;
	&RFC0791;
	&RFC0792;
	&RFC2119;
	&RFC2460;
	&RFC4443;
	&RFC4820;
	&RFC4821;
	&RFC4895;
	&RFC4960;
	&RFC5061;
	</references>
	<references title="Informative References">
	<reference anchor="BEHAVE"><front>
	<title>Stream Control Transmission Protocol (SCTP) Network Address Translation</title>
	<author fullname="R. Stewart" initials="R." surname="Stewart">
	</author>

	<author fullname="M. Tuexen" initials="M." surname="Tuexen">
	</author>

	<author fullname="I. Ruengeler" initials="I." surname="Ruengeler">
	</author>

	<date month="February" year="2013"/>
	</front>

	<seriesInfo name="Work" value="in Progress"/>
	</reference>
	<reference anchor="NATSUPP"><front>
	<title>Stream Control Transmission Protocol (SCTP) Network Address Translation Support</title>
	<author fullname="R. Stewart" initials="R." surname="Stewart">
	</author>

	<author fullname="M. Tuexen" initials="M." surname="Tuexen">
	</author>

	<author fullname="I. Ruengeler" initials="I." surname="Ruengeler">
	</author>

	<date month="February" year="2013"/>
	</front>

	<seriesInfo name="Work" value="in Progress"/>
	</reference>
	&RFC3424;
	&RFC6335;
	&RFC6458;
	&RFC6936;
	</references>
	</back>

	</rfc>
	
